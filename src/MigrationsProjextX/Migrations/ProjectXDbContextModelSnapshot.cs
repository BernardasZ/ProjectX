// <auto-generated />
using System;
using Infrastructure.Databases.ProjectX;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MigrationsProjextX.Migrations
{
    [DbContext(typeof(ProjectXDbContext))]
    partial class ProjectXDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.PermissionActionModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int?>("ControllerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ControllerId");

                    b.ToTable("PermissionActions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ControllerId = 1,
                            Name = "Logout"
                        },
                        new
                        {
                            Id = 2,
                            ControllerId = 1,
                            Name = "ChangePassword"
                        },
                        new
                        {
                            Id = 3,
                            ControllerId = 1,
                            Name = "All"
                        },
                        new
                        {
                            Id = 4,
                            ControllerId = 2,
                            Name = "GetAllByUserId"
                        },
                        new
                        {
                            Id = 5,
                            ControllerId = 2,
                            Name = "Create"
                        },
                        new
                        {
                            Id = 6,
                            ControllerId = 2,
                            Name = "GetById"
                        },
                        new
                        {
                            Id = 7,
                            ControllerId = 2,
                            Name = "Update"
                        },
                        new
                        {
                            Id = 8,
                            ControllerId = 2,
                            Name = "Delete"
                        },
                        new
                        {
                            Id = 9,
                            ControllerId = 2,
                            Name = "All"
                        },
                        new
                        {
                            Id = 10,
                            ControllerId = 3,
                            Name = "GetAll"
                        },
                        new
                        {
                            Id = 11,
                            ControllerId = 3,
                            Name = "GetById"
                        },
                        new
                        {
                            Id = 12,
                            ControllerId = 3,
                            Name = "Update"
                        },
                        new
                        {
                            Id = 13,
                            ControllerId = 3,
                            Name = "Delete"
                        },
                        new
                        {
                            Id = 14,
                            ControllerId = 3,
                            Name = "All"
                        });
                });

            modelBuilder.Entity("Domain.Models.PermissionControllerModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("PermissionControllers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Authentication"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tasks"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Users"
                        });
                });

            modelBuilder.Entity("Domain.Models.PermissionMappingModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int?>("ActionId")
                        .HasColumnType("int");

                    b.Property<bool>("AllowAllActions")
                        .HasColumnType("bit");

                    b.Property<int?>("ControllerId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("ControllerId");

                    b.HasIndex("RoleId");

                    b.ToTable("PermissionMappings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionId = 3,
                            AllowAllActions = true,
                            ControllerId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            ActionId = 9,
                            AllowAllActions = true,
                            ControllerId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            ActionId = 14,
                            AllowAllActions = true,
                            ControllerId = 3,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Domain.Models.RoleModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            Value = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "User",
                            Value = 1
                        });
                });

            modelBuilder.Entity("Domain.Models.TaskModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Domain.Models.UserModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("FailedLoginCount")
                        .HasColumnType("int");

                    b.Property<bool?>("IsTokenUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PassHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TokenExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TokenHash")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@projectx.com",
                            FailedLoginCount = 0,
                            Name = "projectxadmin",
                            PassHash = "E5scnWql/WJsaL0tYvsNKVbYP8ZJR0s0WNNhCjLlcXw=",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Domain.Models.UserSessionModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<DateTime>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("SessionIdentifier")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("Domain.Models.PermissionActionModel", b =>
                {
                    b.HasOne("Domain.Models.PermissionControllerModel", "Controller")
                        .WithMany("PermissionActions")
                        .HasForeignKey("ControllerId");

                    b.Navigation("Controller");
                });

            modelBuilder.Entity("Domain.Models.PermissionMappingModel", b =>
                {
                    b.HasOne("Domain.Models.PermissionActionModel", "Action")
                        .WithMany("PermissionMappings")
                        .HasForeignKey("ActionId");

                    b.HasOne("Domain.Models.PermissionControllerModel", "Controller")
                        .WithMany("PermissionMappings")
                        .HasForeignKey("ControllerId");

                    b.HasOne("Domain.Models.RoleModel", "Role")
                        .WithMany("PermissionMappings")
                        .HasForeignKey("RoleId");

                    b.Navigation("Action");

                    b.Navigation("Controller");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Models.TaskModel", b =>
                {
                    b.HasOne("Domain.Models.UserModel", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.UserModel", b =>
                {
                    b.HasOne("Domain.Models.RoleModel", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Models.UserSessionModel", b =>
                {
                    b.HasOne("Domain.Models.UserModel", "User")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.PermissionActionModel", b =>
                {
                    b.Navigation("PermissionMappings");
                });

            modelBuilder.Entity("Domain.Models.PermissionControllerModel", b =>
                {
                    b.Navigation("PermissionActions");

                    b.Navigation("PermissionMappings");
                });

            modelBuilder.Entity("Domain.Models.RoleModel", b =>
                {
                    b.Navigation("PermissionMappings");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Models.UserModel", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("UserSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
